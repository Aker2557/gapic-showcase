// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/example/feature_testing/v1/feature_testing_service.proto

package google_example_feature_testing_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_longrunning "google.golang.org/genproto/googleapis/longrunning"
import google_protobuf3 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf4 "github.com/golang/protobuf/ptypes/timestamp"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The request for FeatureTestingService TimeoutTest method.
type TimeoutTestRequest struct {
	// The amount of time to wait before returning a response.
	ResponseDelay *google_protobuf3.Duration `protobuf:"bytes,1,opt,name=response_delay,json=responseDelay" json:"response_delay,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*TimeoutTestRequest_Error
	//	*TimeoutTestRequest_Success
	Response isTimeoutTestRequest_Response `protobuf_oneof:"response"`
}

func (m *TimeoutTestRequest) Reset()                    { *m = TimeoutTestRequest{} }
func (m *TimeoutTestRequest) String() string            { return proto.CompactTextString(m) }
func (*TimeoutTestRequest) ProtoMessage()               {}
func (*TimeoutTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isTimeoutTestRequest_Response interface {
	isTimeoutTestRequest_Response()
}

type TimeoutTestRequest_Error struct {
	Error *google_rpc.Status `protobuf:"bytes,2,opt,name=error,oneof"`
}
type TimeoutTestRequest_Success struct {
	Success *TimeoutTestResponse `protobuf:"bytes,3,opt,name=success,oneof"`
}

func (*TimeoutTestRequest_Error) isTimeoutTestRequest_Response()   {}
func (*TimeoutTestRequest_Success) isTimeoutTestRequest_Response() {}

func (m *TimeoutTestRequest) GetResponse() isTimeoutTestRequest_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *TimeoutTestRequest) GetResponseDelay() *google_protobuf3.Duration {
	if m != nil {
		return m.ResponseDelay
	}
	return nil
}

func (m *TimeoutTestRequest) GetError() *google_rpc.Status {
	if x, ok := m.GetResponse().(*TimeoutTestRequest_Error); ok {
		return x.Error
	}
	return nil
}

func (m *TimeoutTestRequest) GetSuccess() *TimeoutTestResponse {
	if x, ok := m.GetResponse().(*TimeoutTestRequest_Success); ok {
		return x.Success
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TimeoutTestRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TimeoutTestRequest_OneofMarshaler, _TimeoutTestRequest_OneofUnmarshaler, _TimeoutTestRequest_OneofSizer, []interface{}{
		(*TimeoutTestRequest_Error)(nil),
		(*TimeoutTestRequest_Success)(nil),
	}
}

func _TimeoutTestRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TimeoutTestRequest)
	// response
	switch x := m.Response.(type) {
	case *TimeoutTestRequest_Error:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *TimeoutTestRequest_Success:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TimeoutTestRequest.Response has unexpected type %T", x)
	}
	return nil
}

func _TimeoutTestRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TimeoutTestRequest)
	switch tag {
	case 2: // response.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_rpc.Status)
		err := b.DecodeMessage(msg)
		m.Response = &TimeoutTestRequest_Error{msg}
		return true, err
	case 3: // response.success
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TimeoutTestResponse)
		err := b.DecodeMessage(msg)
		m.Response = &TimeoutTestRequest_Success{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TimeoutTestRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TimeoutTestRequest)
	// response
	switch x := m.Response.(type) {
	case *TimeoutTestRequest_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TimeoutTestRequest_Success:
		s := proto.Size(x.Success)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The response for FeatureTestingService TimeoutTest method.
type TimeoutTestResponse struct {
	// This content can contain anything, the server will not depend on a value
	// here.
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *TimeoutTestResponse) Reset()                    { *m = TimeoutTestResponse{} }
func (m *TimeoutTestResponse) String() string            { return proto.CompactTextString(m) }
func (*TimeoutTestResponse) ProtoMessage()               {}
func (*TimeoutTestResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *TimeoutTestResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// The request for the FeatureTestingService SetupRetryTest method.
type SetupRetryTestRequest struct {
	// The server will respond in the order that is given in this field.
	Responses []*google_rpc.Status `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *SetupRetryTestRequest) Reset()                    { *m = SetupRetryTestRequest{} }
func (m *SetupRetryTestRequest) String() string            { return proto.CompactTextString(m) }
func (*SetupRetryTestRequest) ProtoMessage()               {}
func (*SetupRetryTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *SetupRetryTestRequest) GetResponses() []*google_rpc.Status {
	if m != nil {
		return m.Responses
	}
	return nil
}

// The ID which a given list of responses will be bound to.
type RetryTestId struct {
	// An ID which will the given list of responses will be bound to on the
	// server.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RetryTestId) Reset()                    { *m = RetryTestId{} }
func (m *RetryTestId) String() string            { return proto.CompactTextString(m) }
func (*RetryTestId) ProtoMessage()               {}
func (*RetryTestId) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RetryTestId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// The request for the FeatureTestingService LongrunningTest method.
type LongrunningTestRequest struct {
	// The time after which this operation will succeed. If, upon the first,
	// the time has passed, the initial response will return a completed
	// operation.
	CompletionTime *google_protobuf4.Timestamp `protobuf:"bytes,1,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*LongrunningTestRequest_Error
	//	*LongrunningTestRequest_Success
	Response isLongrunningTestRequest_Response `protobuf_oneof:"response"`
}

func (m *LongrunningTestRequest) Reset()                    { *m = LongrunningTestRequest{} }
func (m *LongrunningTestRequest) String() string            { return proto.CompactTextString(m) }
func (*LongrunningTestRequest) ProtoMessage()               {}
func (*LongrunningTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type isLongrunningTestRequest_Response interface {
	isLongrunningTestRequest_Response()
}

type LongrunningTestRequest_Error struct {
	Error *google_rpc.Status `protobuf:"bytes,2,opt,name=error,oneof"`
}
type LongrunningTestRequest_Success struct {
	Success *LongrunningTestResponse `protobuf:"bytes,3,opt,name=success,oneof"`
}

func (*LongrunningTestRequest_Error) isLongrunningTestRequest_Response()   {}
func (*LongrunningTestRequest_Success) isLongrunningTestRequest_Response() {}

func (m *LongrunningTestRequest) GetResponse() isLongrunningTestRequest_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *LongrunningTestRequest) GetCompletionTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.CompletionTime
	}
	return nil
}

func (m *LongrunningTestRequest) GetError() *google_rpc.Status {
	if x, ok := m.GetResponse().(*LongrunningTestRequest_Error); ok {
		return x.Error
	}
	return nil
}

func (m *LongrunningTestRequest) GetSuccess() *LongrunningTestResponse {
	if x, ok := m.GetResponse().(*LongrunningTestRequest_Success); ok {
		return x.Success
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LongrunningTestRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LongrunningTestRequest_OneofMarshaler, _LongrunningTestRequest_OneofUnmarshaler, _LongrunningTestRequest_OneofSizer, []interface{}{
		(*LongrunningTestRequest_Error)(nil),
		(*LongrunningTestRequest_Success)(nil),
	}
}

func _LongrunningTestRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LongrunningTestRequest)
	// response
	switch x := m.Response.(type) {
	case *LongrunningTestRequest_Error:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *LongrunningTestRequest_Success:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LongrunningTestRequest.Response has unexpected type %T", x)
	}
	return nil
}

func _LongrunningTestRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LongrunningTestRequest)
	switch tag {
	case 2: // response.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_rpc.Status)
		err := b.DecodeMessage(msg)
		m.Response = &LongrunningTestRequest_Error{msg}
		return true, err
	case 3: // response.success
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LongrunningTestResponse)
		err := b.DecodeMessage(msg)
		m.Response = &LongrunningTestRequest_Success{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LongrunningTestRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LongrunningTestRequest)
	// response
	switch x := m.Response.(type) {
	case *LongrunningTestRequest_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LongrunningTestRequest_Success:
		s := proto.Size(x.Success)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The metadata for the FeatureTestingService LongrunningTest method.
type LongrunningTestMetadata struct {
	// The amount of time remaining on this operation.
	TimeRemaining *google_protobuf3.Duration `protobuf:"bytes,1,opt,name=time_remaining,json=timeRemaining" json:"time_remaining,omitempty"`
}

func (m *LongrunningTestMetadata) Reset()                    { *m = LongrunningTestMetadata{} }
func (m *LongrunningTestMetadata) String() string            { return proto.CompactTextString(m) }
func (*LongrunningTestMetadata) ProtoMessage()               {}
func (*LongrunningTestMetadata) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *LongrunningTestMetadata) GetTimeRemaining() *google_protobuf3.Duration {
	if m != nil {
		return m.TimeRemaining
	}
	return nil
}

// The final operation response for the FeatureTestingService LongrunningTest
// method.
type LongrunningTestResponse struct {
	// The response that will be returned for a successful operation.
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *LongrunningTestResponse) Reset()                    { *m = LongrunningTestResponse{} }
func (m *LongrunningTestResponse) String() string            { return proto.CompactTextString(m) }
func (*LongrunningTestResponse) ProtoMessage()               {}
func (*LongrunningTestResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *LongrunningTestResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// The request for the FeatureTestingService PaginationTest.
type PaginationTestRequest struct {
	// The maximum number that will be returned in the response.
	MaxResponse int32 `protobuf:"varint,1,opt,name=max_response,json=maxResponse" json:"max_response,omitempty"`
	// The amount of numbers to returned in the response.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// The position of the page to be returned. This will be a stringified int
	// that will signifiy where to start the page from. Anything other than
	// a stringified integer within the range of 0 and the max_response will
	// cause an error to be thrown. This value is a string as opposed to a int32
	// to follow general google api practices.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// This field is used to test the client's ability to handle servers that
	// return a page that is larger the specified page size.
	PageSizeOverride int32 `protobuf:"varint,4,opt,name=page_size_override,json=pageSizeOverride" json:"page_size_override,omitempty"`
}

func (m *PaginationTestRequest) Reset()                    { *m = PaginationTestRequest{} }
func (m *PaginationTestRequest) String() string            { return proto.CompactTextString(m) }
func (*PaginationTestRequest) ProtoMessage()               {}
func (*PaginationTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *PaginationTestRequest) GetMaxResponse() int32 {
	if m != nil {
		return m.MaxResponse
	}
	return 0
}

func (m *PaginationTestRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PaginationTestRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *PaginationTestRequest) GetPageSizeOverride() int32 {
	if m != nil {
		return m.PageSizeOverride
	}
	return 0
}

// The response for the FeatureTestingService PaginationTest method.
type PaginationTestResponse struct {
	// An increasing list of responses starting at the value specified by the
	// page token. If the page token is empty, then this list will start at 0.
	Responses []int32 `protobuf:"varint,1,rep,packed,name=responses" json:"responses,omitempty"`
	// The next integer stringified.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *PaginationTestResponse) Reset()                    { *m = PaginationTestResponse{} }
func (m *PaginationTestResponse) String() string            { return proto.CompactTextString(m) }
func (*PaginationTestResponse) ProtoMessage()               {}
func (*PaginationTestResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *PaginationTestResponse) GetResponses() []int32 {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *PaginationTestResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// The request and response message for the FeatureTestingService
// ParameterFlatteningTest.
type ParameterFlatteningTestMessage struct {
	// Simply a string for content.
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	// A list of strings to test repeated fields.
	RepeatedContent []string `protobuf:"bytes,2,rep,name=repeated_content,json=repeatedContent" json:"repeated_content,omitempty"`
	// A message to test flattenings that cause a message type to become a param.
	Nested *ParameterFlatteningTestMessage `protobuf:"bytes,3,opt,name=nested" json:"nested,omitempty"`
}

func (m *ParameterFlatteningTestMessage) Reset()                    { *m = ParameterFlatteningTestMessage{} }
func (m *ParameterFlatteningTestMessage) String() string            { return proto.CompactTextString(m) }
func (*ParameterFlatteningTestMessage) ProtoMessage()               {}
func (*ParameterFlatteningTestMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ParameterFlatteningTestMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ParameterFlatteningTestMessage) GetRepeatedContent() []string {
	if m != nil {
		return m.RepeatedContent
	}
	return nil
}

func (m *ParameterFlatteningTestMessage) GetNested() *ParameterFlatteningTestMessage {
	if m != nil {
		return m.Nested
	}
	return nil
}

// The request and response message for the FeatureTestingService
// ResourceNameTest.
type ResourceNameTestMessage struct {
	// This field will have a single template bound to it.
	SingleTemplate string `protobuf:"bytes,1,opt,name=single_template,json=singleTemplate" json:"single_template,omitempty"`
	// This field will be a oneof resource name with many templates bound to it.
	MultipleTemplates string `protobuf:"bytes,2,opt,name=multiple_templates,json=multipleTemplates" json:"multiple_templates,omitempty"`
}

func (m *ResourceNameTestMessage) Reset()                    { *m = ResourceNameTestMessage{} }
func (m *ResourceNameTestMessage) String() string            { return proto.CompactTextString(m) }
func (*ResourceNameTestMessage) ProtoMessage()               {}
func (*ResourceNameTestMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ResourceNameTestMessage) GetSingleTemplate() string {
	if m != nil {
		return m.SingleTemplate
	}
	return ""
}

func (m *ResourceNameTestMessage) GetMultipleTemplates() string {
	if m != nil {
		return m.MultipleTemplates
	}
	return ""
}

func init() {
	proto.RegisterType((*TimeoutTestRequest)(nil), "google.example.feature_testing.v1.TimeoutTestRequest")
	proto.RegisterType((*TimeoutTestResponse)(nil), "google.example.feature_testing.v1.TimeoutTestResponse")
	proto.RegisterType((*SetupRetryTestRequest)(nil), "google.example.feature_testing.v1.SetupRetryTestRequest")
	proto.RegisterType((*RetryTestId)(nil), "google.example.feature_testing.v1.RetryTestId")
	proto.RegisterType((*LongrunningTestRequest)(nil), "google.example.feature_testing.v1.LongrunningTestRequest")
	proto.RegisterType((*LongrunningTestMetadata)(nil), "google.example.feature_testing.v1.LongrunningTestMetadata")
	proto.RegisterType((*LongrunningTestResponse)(nil), "google.example.feature_testing.v1.LongrunningTestResponse")
	proto.RegisterType((*PaginationTestRequest)(nil), "google.example.feature_testing.v1.PaginationTestRequest")
	proto.RegisterType((*PaginationTestResponse)(nil), "google.example.feature_testing.v1.PaginationTestResponse")
	proto.RegisterType((*ParameterFlatteningTestMessage)(nil), "google.example.feature_testing.v1.ParameterFlatteningTestMessage")
	proto.RegisterType((*ResourceNameTestMessage)(nil), "google.example.feature_testing.v1.ResourceNameTestMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FeatureTestingService service

type FeatureTestingServiceClient interface {
	// This method is to test how a client handles a request timing out. The
	// server will wait the requested amount of response_delay and then return
	// the response specified in the request.
	TimeoutTest(ctx context.Context, in *TimeoutTestRequest, opts ...grpc.CallOption) (*TimeoutTestResponse, error)
	// This method is used to setup a RetryTest. The given list of retry behavior
	// will be bound to an ID defined by the server. Subsequent RetryTest requests
	// of the given ID will respond with the behavior specified in this request.
	SetupRetryTest(ctx context.Context, in *SetupRetryTestRequest, opts ...grpc.CallOption) (*RetryTestId, error)
	// This method is used to test how a client handles errors that can be
	// retried. Requests to a given RetryTestId will respond in the way specified
	// in SetupRetryTest method.
	RetryTest(ctx context.Context, in *RetryTestId, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// This method is used to test how a client handles a long running operation.
	// Upon receiving a request, the server will create a new ID and mark that
	// the ID created will complete at the time denoted in the request. If the
	// completion time has already passed, the server will return a longrunning
	// operation that signifies a completed operation. Upon subsequent requests
	// to the Longrunning mixin service, if the operation is incomplete, the
	// the server will return metadata denoting the percent that the operation
	// is complete, else the server will return a completed operation that will
	// either denote that the operation has succeeded or failed.
	LongrunningTest(ctx context.Context, in *LongrunningTestRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error)
	// This method is used to test how a client will handle a method that lists
	// responses in a paginated method. The request will specify an ID and the
	// maximum number of responses to return. If the ID has not been seen before
	// the server will mark the ID specified and the maximum number to be
	// returned. The page token will be a stringified integer denoting the
	// the number to start the page at.
	PaginationTest(ctx context.Context, in *PaginationTestRequest, opts ...grpc.CallOption) (*PaginationTestResponse, error)
	// This method is used to test how a client will handle configuration to
	// flatten a request. The server will simply echo the request and
	ParameterFlatteningTest(ctx context.Context, in *ParameterFlatteningTestMessage, opts ...grpc.CallOption) (*ParameterFlatteningTestMessage, error)
	// This method is used to test how a client will handle request strings that
	// are configured to follow a certain pattern or set of patterns. The server
	// will simply echo the request.
	ResourceNameTest(ctx context.Context, in *ResourceNameTestMessage, opts ...grpc.CallOption) (*ResourceNameTestMessage, error)
}

type featureTestingServiceClient struct {
	cc *grpc.ClientConn
}

func NewFeatureTestingServiceClient(cc *grpc.ClientConn) FeatureTestingServiceClient {
	return &featureTestingServiceClient{cc}
}

func (c *featureTestingServiceClient) TimeoutTest(ctx context.Context, in *TimeoutTestRequest, opts ...grpc.CallOption) (*TimeoutTestResponse, error) {
	out := new(TimeoutTestResponse)
	err := grpc.Invoke(ctx, "/google.example.feature_testing.v1.FeatureTestingService/TimeoutTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureTestingServiceClient) SetupRetryTest(ctx context.Context, in *SetupRetryTestRequest, opts ...grpc.CallOption) (*RetryTestId, error) {
	out := new(RetryTestId)
	err := grpc.Invoke(ctx, "/google.example.feature_testing.v1.FeatureTestingService/SetupRetryTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureTestingServiceClient) RetryTest(ctx context.Context, in *RetryTestId, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/google.example.feature_testing.v1.FeatureTestingService/RetryTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureTestingServiceClient) LongrunningTest(ctx context.Context, in *LongrunningTestRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error) {
	out := new(google_longrunning.Operation)
	err := grpc.Invoke(ctx, "/google.example.feature_testing.v1.FeatureTestingService/LongrunningTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureTestingServiceClient) PaginationTest(ctx context.Context, in *PaginationTestRequest, opts ...grpc.CallOption) (*PaginationTestResponse, error) {
	out := new(PaginationTestResponse)
	err := grpc.Invoke(ctx, "/google.example.feature_testing.v1.FeatureTestingService/PaginationTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureTestingServiceClient) ParameterFlatteningTest(ctx context.Context, in *ParameterFlatteningTestMessage, opts ...grpc.CallOption) (*ParameterFlatteningTestMessage, error) {
	out := new(ParameterFlatteningTestMessage)
	err := grpc.Invoke(ctx, "/google.example.feature_testing.v1.FeatureTestingService/ParameterFlatteningTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureTestingServiceClient) ResourceNameTest(ctx context.Context, in *ResourceNameTestMessage, opts ...grpc.CallOption) (*ResourceNameTestMessage, error) {
	out := new(ResourceNameTestMessage)
	err := grpc.Invoke(ctx, "/google.example.feature_testing.v1.FeatureTestingService/ResourceNameTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FeatureTestingService service

type FeatureTestingServiceServer interface {
	// This method is to test how a client handles a request timing out. The
	// server will wait the requested amount of response_delay and then return
	// the response specified in the request.
	TimeoutTest(context.Context, *TimeoutTestRequest) (*TimeoutTestResponse, error)
	// This method is used to setup a RetryTest. The given list of retry behavior
	// will be bound to an ID defined by the server. Subsequent RetryTest requests
	// of the given ID will respond with the behavior specified in this request.
	SetupRetryTest(context.Context, *SetupRetryTestRequest) (*RetryTestId, error)
	// This method is used to test how a client handles errors that can be
	// retried. Requests to a given RetryTestId will respond in the way specified
	// in SetupRetryTest method.
	RetryTest(context.Context, *RetryTestId) (*google_protobuf2.Empty, error)
	// This method is used to test how a client handles a long running operation.
	// Upon receiving a request, the server will create a new ID and mark that
	// the ID created will complete at the time denoted in the request. If the
	// completion time has already passed, the server will return a longrunning
	// operation that signifies a completed operation. Upon subsequent requests
	// to the Longrunning mixin service, if the operation is incomplete, the
	// the server will return metadata denoting the percent that the operation
	// is complete, else the server will return a completed operation that will
	// either denote that the operation has succeeded or failed.
	LongrunningTest(context.Context, *LongrunningTestRequest) (*google_longrunning.Operation, error)
	// This method is used to test how a client will handle a method that lists
	// responses in a paginated method. The request will specify an ID and the
	// maximum number of responses to return. If the ID has not been seen before
	// the server will mark the ID specified and the maximum number to be
	// returned. The page token will be a stringified integer denoting the
	// the number to start the page at.
	PaginationTest(context.Context, *PaginationTestRequest) (*PaginationTestResponse, error)
	// This method is used to test how a client will handle configuration to
	// flatten a request. The server will simply echo the request and
	ParameterFlatteningTest(context.Context, *ParameterFlatteningTestMessage) (*ParameterFlatteningTestMessage, error)
	// This method is used to test how a client will handle request strings that
	// are configured to follow a certain pattern or set of patterns. The server
	// will simply echo the request.
	ResourceNameTest(context.Context, *ResourceNameTestMessage) (*ResourceNameTestMessage, error)
}

func RegisterFeatureTestingServiceServer(s *grpc.Server, srv FeatureTestingServiceServer) {
	s.RegisterService(&_FeatureTestingService_serviceDesc, srv)
}

func _FeatureTestingService_TimeoutTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureTestingServiceServer).TimeoutTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.example.feature_testing.v1.FeatureTestingService/TimeoutTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureTestingServiceServer).TimeoutTest(ctx, req.(*TimeoutTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureTestingService_SetupRetryTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupRetryTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureTestingServiceServer).SetupRetryTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.example.feature_testing.v1.FeatureTestingService/SetupRetryTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureTestingServiceServer).SetupRetryTest(ctx, req.(*SetupRetryTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureTestingService_RetryTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryTestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureTestingServiceServer).RetryTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.example.feature_testing.v1.FeatureTestingService/RetryTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureTestingServiceServer).RetryTest(ctx, req.(*RetryTestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureTestingService_LongrunningTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongrunningTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureTestingServiceServer).LongrunningTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.example.feature_testing.v1.FeatureTestingService/LongrunningTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureTestingServiceServer).LongrunningTest(ctx, req.(*LongrunningTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureTestingService_PaginationTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureTestingServiceServer).PaginationTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.example.feature_testing.v1.FeatureTestingService/PaginationTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureTestingServiceServer).PaginationTest(ctx, req.(*PaginationTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureTestingService_ParameterFlatteningTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterFlatteningTestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureTestingServiceServer).ParameterFlatteningTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.example.feature_testing.v1.FeatureTestingService/ParameterFlatteningTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureTestingServiceServer).ParameterFlatteningTest(ctx, req.(*ParameterFlatteningTestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureTestingService_ResourceNameTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceNameTestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureTestingServiceServer).ResourceNameTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.example.feature_testing.v1.FeatureTestingService/ResourceNameTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureTestingServiceServer).ResourceNameTest(ctx, req.(*ResourceNameTestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeatureTestingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.example.feature_testing.v1.FeatureTestingService",
	HandlerType: (*FeatureTestingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TimeoutTest",
			Handler:    _FeatureTestingService_TimeoutTest_Handler,
		},
		{
			MethodName: "SetupRetryTest",
			Handler:    _FeatureTestingService_SetupRetryTest_Handler,
		},
		{
			MethodName: "RetryTest",
			Handler:    _FeatureTestingService_RetryTest_Handler,
		},
		{
			MethodName: "LongrunningTest",
			Handler:    _FeatureTestingService_LongrunningTest_Handler,
		},
		{
			MethodName: "PaginationTest",
			Handler:    _FeatureTestingService_PaginationTest_Handler,
		},
		{
			MethodName: "ParameterFlatteningTest",
			Handler:    _FeatureTestingService_ParameterFlatteningTest_Handler,
		},
		{
			MethodName: "ResourceNameTest",
			Handler:    _FeatureTestingService_ResourceNameTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/example/feature_testing/v1/feature_testing_service.proto",
}

func init() {
	proto.RegisterFile("google/example/feature_testing/v1/feature_testing_service.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0xb6, 0x37, 0x6c, 0xd3, 0x3d, 0x4b, 0x77, 0xc3, 0xa0, 0x64, 0x17, 0x97, 0x94, 0xd4, 0x48,
	0x50, 0x10, 0x78, 0x69, 0x2b, 0x10, 0xed, 0x0d, 0x3f, 0x2d, 0x55, 0x2b, 0x01, 0x8d, 0x66, 0x17,
	0x24, 0x84, 0x84, 0x35, 0xb5, 0x4f, 0x2c, 0x0b, 0xff, 0x65, 0x66, 0xbc, 0xda, 0x44, 0x88, 0x5b,
	0x6e, 0x78, 0x00, 0x6e, 0x91, 0x78, 0x10, 0x9e, 0x85, 0x7b, 0xde, 0x01, 0xd9, 0x9e, 0xd9, 0x75,
	0xbc, 0x4b, 0xea, 0x24, 0x97, 0x3e, 0xf3, 0x9d, 0xef, 0x7c, 0xe7, 0xd7, 0xf0, 0x59, 0x90, 0xa6,
	0x41, 0x84, 0x13, 0x5c, 0xb0, 0x38, 0x8b, 0x70, 0x72, 0x84, 0x4c, 0xe6, 0x1c, 0x5d, 0x89, 0x42,
	0x86, 0x49, 0x30, 0x99, 0xdf, 0x6d, 0x9a, 0x5c, 0x81, 0x7c, 0x1e, 0x7a, 0xe8, 0x64, 0x3c, 0x95,
	0x29, 0xb9, 0x5d, 0x11, 0x38, 0x8a, 0xc0, 0x69, 0xa0, 0x9d, 0xf9, 0x5d, 0xeb, 0x6d, 0x15, 0x23,
	0x4a, 0x93, 0x80, 0xe7, 0x49, 0x52, 0xf0, 0xa6, 0x19, 0x72, 0x26, 0xc3, 0x34, 0x11, 0x15, 0x8f,
	0x75, 0x4b, 0x81, 0xca, 0xaf, 0x17, 0xf9, 0xd1, 0xc4, 0xcf, 0x2b, 0x80, 0x7a, 0xbf, 0xd9, 0x7c,
	0xc7, 0x38, 0x93, 0x27, 0xea, 0xf1, 0xad, 0xe6, 0xa3, 0x0c, 0x63, 0x14, 0x92, 0xc5, 0x99, 0x02,
	0x8c, 0x14, 0x80, 0x67, 0xde, 0x44, 0x48, 0x26, 0x73, 0x15, 0xd6, 0xfe, 0xc7, 0x04, 0x32, 0x0b,
	0x63, 0x4c, 0x73, 0x39, 0x43, 0x21, 0x29, 0x1e, 0xe7, 0x28, 0x24, 0xf9, 0x1c, 0x06, 0x1c, 0x45,
	0x96, 0x26, 0x02, 0x5d, 0x1f, 0x23, 0x76, 0x32, 0x36, 0x0f, 0xcc, 0x3b, 0xfd, 0x7b, 0x6f, 0x38,
	0x2a, 0x5d, 0x1d, 0xc9, 0x79, 0xac, 0x64, 0xd2, 0x1b, 0xda, 0xe1, 0x71, 0x81, 0x27, 0xef, 0x43,
	0x17, 0x39, 0x4f, 0xf9, 0xb8, 0x53, 0x3a, 0x12, 0xed, 0xc8, 0x33, 0xcf, 0x99, 0x96, 0x0a, 0x9e,
	0x1a, 0xb4, 0x82, 0x10, 0x0a, 0xdb, 0x22, 0xf7, 0x3c, 0x14, 0x62, 0xbc, 0x55, 0xa2, 0x3f, 0x71,
	0x5e, 0x5a, 0x55, 0xe7, 0x8c, 0xea, 0x2a, 0xf2, 0x53, 0x83, 0x6a, 0xa2, 0x2f, 0x01, 0xae, 0x6b,
	0x41, 0xf6, 0x04, 0x5e, 0xdf, 0x80, 0x26, 0x63, 0xd8, 0xf6, 0xd2, 0x44, 0x62, 0x22, 0xcb, 0xec,
	0x7a, 0x54, 0x7f, 0xda, 0xcf, 0x60, 0x77, 0x8a, 0x32, 0xcf, 0x28, 0x4a, 0x7e, 0x52, 0xaf, 0xcb,
	0x47, 0xd0, 0xd3, 0xac, 0x62, 0x6c, 0x1e, 0x6c, 0x6d, 0xce, 0x8c, 0xae, 0x40, 0xf6, 0x3e, 0xf4,
	0x97, 0x2c, 0xcf, 0x7c, 0x32, 0x80, 0x4e, 0xe8, 0xab, 0x70, 0x9d, 0xd0, 0xb7, 0xff, 0x35, 0x61,
	0xef, 0xeb, 0xd5, 0x5c, 0xd4, 0x63, 0x3d, 0x82, 0xa1, 0x97, 0x16, 0xd9, 0x17, 0xe5, 0x75, 0x8b,
	0x8e, 0xaa, 0x26, 0x58, 0x6b, 0x4d, 0x98, 0xe9, 0x76, 0xd3, 0xc1, 0xca, 0xa5, 0x30, 0x5e, 0xa8,
	0x0d, 0xdf, 0x37, 0xdb, 0xf0, 0xb0, 0x45, 0x1b, 0xd6, 0xc4, 0x9f, 0xdf, 0x8a, 0x1f, 0x61, 0xd4,
	0xf0, 0xf8, 0x06, 0x25, 0xf3, 0x99, 0x64, 0xc5, 0xcc, 0x15, 0x49, 0xba, 0x1c, 0x63, 0x16, 0x16,
	0xaf, 0x2d, 0x66, 0xae, 0x70, 0xa0, 0x1a, 0x6f, 0xdf, 0x5f, 0x23, 0x6f, 0xd1, 0xeb, 0xbf, 0x4c,
	0xd8, 0x3d, 0x64, 0x41, 0x98, 0x94, 0x94, 0xf5, 0x06, 0xdc, 0x86, 0x57, 0x63, 0xb6, 0x70, 0xb5,
	0xf6, 0xd2, 0xb1, 0x4b, 0xfb, 0x31, 0x5b, 0x2c, 0x69, 0x6f, 0x42, 0x2f, 0x63, 0x01, 0xba, 0x22,
	0x3c, 0xc5, 0xb2, 0xc4, 0x5d, 0x7a, 0xbd, 0x30, 0x4c, 0xc3, 0x53, 0x24, 0xfb, 0x00, 0xe5, 0xa3,
	0x4c, 0x7f, 0xc6, 0xa4, 0x2c, 0x69, 0x8f, 0x96, 0xf0, 0x59, 0x61, 0x20, 0x1f, 0x00, 0x59, 0xfa,
	0xba, 0xe9, 0x1c, 0x39, 0x0f, 0x7d, 0x1c, 0xbf, 0x52, 0x92, 0xec, 0x68, 0x92, 0xe7, 0xca, 0x6e,
	0xff, 0x04, 0x7b, 0x4d, 0x95, 0x4a, 0xc3, 0x9b, 0xcd, 0x99, 0xec, 0xd6, 0xe6, 0x8f, 0xbc, 0x03,
	0xc3, 0x04, 0x17, 0xd2, 0xad, 0x29, 0xe9, 0x94, 0x4a, 0x6e, 0x14, 0xe6, 0x43, 0xad, 0xc6, 0xfe,
	0xdb, 0x84, 0x5b, 0x87, 0x8c, 0xb3, 0x18, 0x25, 0xf2, 0x27, 0x11, 0x93, 0x12, 0x57, 0x1d, 0x12,
	0x82, 0x05, 0xe7, 0xd4, 0x90, 0xbc, 0x07, 0x3b, 0x1c, 0x33, 0x64, 0x12, 0x7d, 0x57, 0x43, 0x3a,
	0x07, 0x5b, 0x77, 0x7a, 0x74, 0xa8, 0xed, 0x8f, 0x14, 0xf4, 0x07, 0xb8, 0x96, 0xa0, 0x90, 0xe8,
	0xab, 0x19, 0xfb, 0xa2, 0xc5, 0x8c, 0x9d, 0xaf, 0x8b, 0x2a, 0x42, 0xfb, 0x18, 0x46, 0x14, 0x45,
	0x9a, 0x73, 0x0f, 0xbf, 0x65, 0x31, 0xd6, 0xa5, 0xbf, 0x0b, 0x43, 0x11, 0x26, 0x41, 0x54, 0xd0,
	0xc6, 0x59, 0xc4, 0x24, 0xaa, 0x14, 0x06, 0x95, 0x79, 0xa6, 0xac, 0xe4, 0x43, 0x20, 0x71, 0x1e,
	0xc9, 0x30, 0xab, 0x41, 0x85, 0xaa, 0xd8, 0x6b, 0xfa, 0x45, 0xa3, 0xc5, 0xbd, 0x3f, 0xb6, 0x61,
	0xf7, 0x49, 0x25, 0x78, 0x56, 0xe9, 0x9d, 0x56, 0x7f, 0x07, 0xf2, 0x2b, 0xf4, 0x6b, 0x37, 0x87,
	0x7c, 0x7c, 0xd1, 0x8b, 0x56, 0x8e, 0xa0, 0x75, 0xc9, 0x43, 0x68, 0x1b, 0xe4, 0x17, 0x18, 0x9c,
	0x3d, 0x61, 0xe4, 0xd3, 0x16, 0x5c, 0x1b, 0xaf, 0x9e, 0xe5, 0xb4, 0xf0, 0xac, 0x1d, 0x39, 0xdb,
	0x20, 0xdf, 0x41, 0x6f, 0x15, 0xf8, 0x82, 0xee, 0xd6, 0xde, 0xda, 0xc2, 0x7f, 0x55, 0xfc, 0xeb,
	0x6c, 0x83, 0xc4, 0x30, 0x6c, 0x2c, 0x38, 0x79, 0x70, 0x99, 0x1b, 0x55, 0xa5, 0xb5, 0xaf, 0x5d,
	0x6b, 0x3f, 0x66, 0xe7, 0xb9, 0xfe, 0x31, 0xdb, 0x06, 0xf9, 0xcd, 0x84, 0xc1, 0xd9, 0xa5, 0x6b,
	0x55, 0xc4, 0x8d, 0xd7, 0xc4, 0x7a, 0x70, 0x09, 0xcf, 0x65, 0x37, 0xff, 0x34, 0x61, 0xf4, 0x3f,
	0x5b, 0x40, 0xae, 0xbe, 0x41, 0xd6, 0xd5, 0x29, 0x6c, 0x83, 0xfc, 0x6e, 0xc2, 0x4e, 0x73, 0xff,
	0xc8, 0xc3, 0x56, 0xbd, 0xdf, 0xb8, 0xb4, 0xd6, 0x15, 0x7c, 0x6d, 0xe3, 0xc5, 0xb5, 0x72, 0x7a,
	0xee, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x69, 0xbf, 0x9e, 0xa2, 0xe2, 0x09, 0x00, 0x00,
}
