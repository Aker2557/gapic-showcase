// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/longrunning/operations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

package google.example.feature_testing.v1;

// This is a service to test the feature set of the googleapis gapic-generator.
service FeatureTestingService {
  // This method is to test how a client handles a request timing out. The
  // server will wait the requested amount of response_delay and then return
  // the response specified in the request.
  rpc TimeoutTest(TimeoutTestRequest) returns (TimeoutTestResponse) {}

  // This method is used to setup a RetryTest. The given list of retry behavior
  // will be bound to an ID defined by the server. Subsequent RetryTest requests
  // of the given ID will respond with the behavior specified in this request.
  rpc SetupRetryTest(SetupRetryTestRequest) returns (RetryTestId) {}

  // This method is used to test how a client handles errors that can be 
  // retried. Requests to a given RetryTestId will respond in the way specified
  // in SetupRetryTest method.
  rpc RetryTest(RetryTestId) returns (google.protobuf.Empty) {}

  // This method is used to test how a client handles a long running operation.
  // Upon receiving a request, the server will create a new ID and mark that
  // the ID created will complete at the time denoted in the request. If the
  // completion time has already passed, the server will return a longrunning
  // operation that signifies a completed operation. Upon subsequent requests
  // to the Longrunning mixin service, if the operation is incomplete, the
  // the server will return metadata denoting the percent that the operation
  // is complete, else the server will return a completed operation that will
  // either denote that the operation has succeeded or failed.
  rpc LongrunningTest(LongrunningTestRequest) returns (google.longrunning.Operation) {}

  // This method is used to test how a client will handle a method that lists
  // responses in a paginated method. The request will specify an ID and the
  // maximum number of responses to return. If the ID has not been seen before
  // the server will mark the ID specified and the maximum number to be
  // returned. The page token will be a stringified integer denoting the
  // the number to start the page at.
  rpc PaginationTest(PaginationTestRequest) returns (PaginationTestResponse) {}

  // This method is used to test how a client will handle configuration to
  // flatten a request. The server will simply echo the request and 
  rpc ParameterFlatteningTest(ParameterFlatteningTestMessage) returns (ParameterFlatteningTestMessage) {}

  // This method is used to test how a client will handle request strings that
  // are configured to follow a certain pattern or set of patterns. The server
  // will simply echo the request.
  rpc ResourceNameTest(ResourceNameTestMessage) returns (ResourceNameTestMessage) {}
}

// The request for FeatureTestingService TimeoutTest method.
message TimeoutTestRequest {
  // The amount of time to wait before returning a response.
  google.protobuf.Duration response_delay = 1;

  oneof response {
    // The error that will be returned by the server. If this code is specified
    // to be the OK rpc code, an empty response will be returned.
    google.rpc.Status error = 2;

    // The response to be returned that will signify successful method call.
    TimeoutTestResponse success = 3;
  }
}

// The response for FeatureTestingService TimeoutTest method.
message TimeoutTestResponse {
  // This content can contain anything, the server will not depend on a value
  // here.
  string content = 1;
}

// The request for the FeatureTestingService SetupRetryTest method.
message SetupRetryTestRequest {
  // The server will respond in the order that is given in this field.
  repeated google.rpc.Status responses = 1;
}

// The ID which a given list of responses will be bound to.
message RetryTestId {
  // An ID which will the given list of responses will be bound to on the
  // server.
  string id = 1;
}

// The request for the FeatureTestingService LongrunningTest method.
message LongrunningTestRequest {
  // The time after which this operation will succeed. If, upon the first,
  // the time has passed, the initial response will return a completed
  // operation.
  google.protobuf.Timestamp completion_time = 1;

  oneof response {
    // The error that will be returned in the operation signifying a failed
    // operation. If the OK rpc status code is returned, the operation will
    // succeed with an empty operation.
    google.rpc.Status error = 2;

    // The response that will be returned upon operation success.
    LongrunningTestResponse success = 3;
  }
}

// The metadata for the FeatureTestingService LongrunningTest method.
message LongrunningTestMetadata {
  // The amount of time remaining on this operation.
  google.protobuf.Duration time_remaining = 1;
}


// The final operation response for the FeatureTestingService LongrunningTest
// method.
message LongrunningTestResponse {
  // The response that will be returned for a successful operation.
  string content = 1;
}

// The request for the FeatureTestingService PaginationTest.
message PaginationTestRequest {
  // The maximum number that will be returned in the response.
  int32 max_response = 1;

  // The amount of numbers to returned in the response.
  int32 page_size = 2;

  // The position of the page to be returned. This will be a stringified int
  // that will signifiy where to start the page from. Anything other than
  // a stringified integer within the range of 0 and the max_response will
  // cause an error to be thrown. This value is a string as opposed to a int32
  // to follow general google api practices.
  string page_token = 3;

  // This field is used to test the client's ability to handle servers that
  // return a page that is larger the specified page size.
  int32 page_size_override = 4;
}

// The response for the FeatureTestingService PaginationTest method.
message PaginationTestResponse {
  // An increasing list of responses starting at the value specified by the
  // page token. If the page token is empty, then this list will start at 0.
  repeated int32 responses = 1;

  // The next integer stringified.
  string next_page_token = 2;
}

// The request and response message for the FeatureTestingService
// ParameterFlatteningTest.
message ParameterFlatteningTestMessage {
  // Simply a string for content.
  string content = 1;

  // A list of strings to test repeated fields.
  repeated string repeated_content = 2;

  // A message to test flattenings that cause a message type to become a param.
  ParameterFlatteningTestMessage nested = 3;
}

// The request and response message for the FeatureTestingService
// ResourceNameTest.
message ResourceNameTestMessage {
  // This field will have a single template bound to it.
  string single_template = 1;

  // This field will be a oneof resource name with many templates bound to it.
  string multiple_templates = 2;
}

